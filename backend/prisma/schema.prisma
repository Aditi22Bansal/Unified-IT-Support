// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = "file:./dev.db"
}

model User {
  id        String   @id @default(cuid())
  email     String   @unique
  username  String   @unique
  fullName  String
  password  String
  role      UserRole @default(CUSTOMER)
  isActive  Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  tickets        Ticket[]
  assignedTickets Ticket[] @relation("TicketAssignee")
  alerts         Alert[]
  systemLogs     SystemLog[]
  chatbotSessions ChatbotSession[]

  @@map("users")
}

model Ticket {
  id          String      @id @default(cuid())
  title       String
  description String
  priority    Priority    @default(MEDIUM)
  status      TicketStatus @default(OPEN)
  category    String
  tags        String?     // JSON string array
  assignedTo  String?
  createdBy   String
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
  resolvedAt  DateTime?
  slaDeadline DateTime?
  escalationLevel Int     @default(0)

  // Relations
  creator   User   @relation(fields: [createdBy], references: [id])
  assignee  User?  @relation("TicketAssignee", fields: [assignedTo], references: [id])
  comments  TicketComment[]
  attachments TicketAttachment[]
  slaEvents  SLAEvent[]

  @@map("tickets")
}

model TicketComment {
  id        String   @id @default(cuid())
  content   String
  ticketId  String
  authorId  String
  createdAt DateTime @default(now())

  // Relations
  ticket Ticket @relation(fields: [ticketId], references: [id], onDelete: Cascade)
  author User   @relation(fields: [authorId], references: [id])

  @@map("ticket_comments")
}

model TicketAttachment {
  id        String   @id @default(cuid())
  filename  String
  filePath  String
  fileSize  Int
  mimeType  String
  ticketId  String
  uploadedBy String
  createdAt DateTime @default(now())

  // Relations
  ticket Ticket @relation(fields: [ticketId], references: [id], onDelete: Cascade)

  @@map("ticket_attachments")
}

model SLAEvent {
  id        String   @id @default(cuid())
  ticketId  String
  eventType String   // "created", "assigned", "escalated", "resolved"
  timestamp DateTime @default(now())
  metadata  String?  // JSON string

  // Relations
  ticket Ticket @relation(fields: [ticketId], references: [id], onDelete: Cascade)

  @@map("sla_events")
}

model SystemMetric {
  id        String   @id @default(cuid())
  metricType String  // "cpu", "memory", "disk", "network"
  value     Float
  unit      String   // "%", "MB", "GB", "Mbps"
  timestamp DateTime @default(now())
  metadata  String?  // JSON string

  @@map("system_metrics")
}

model Alert {
  id          String      @id @default(cuid())
  title       String
  message     String
  severity    AlertSeverity
  status      AlertStatus @default(ACTIVE)
  source      String      // "system", "ticket", "sla"
  threshold   Float?
  currentValue Float?
  userId      String?
  ticketId    String?
  createdAt   DateTime    @default(now())
  resolvedAt  DateTime?
  acknowledgedAt DateTime?

  // Relations
  user   User?  @relation(fields: [userId], references: [id])
  ticket Ticket? @relation(fields: [ticketId], references: [id])

  @@map("alerts")
}

model SystemLog {
  id        String   @id @default(cuid())
  level     LogLevel
  source    String
  message   String
  metadata  String?  // JSON string
  userId    String?
  timestamp DateTime @default(now())

  // Relations
  user User? @relation(fields: [userId], references: [id])

  @@map("system_logs")
}

model ChatbotSession {
  id        String   @id @default(cuid())
  userId    String?
  sessionId String   @unique
  isActive  Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  user     User?            @relation(fields: [userId], references: [id])
  messages ChatbotMessage[]

  @@map("chatbot_sessions")
}

model ChatbotMessage {
  id        String   @id @default(cuid())
  sessionId String
  content   String
  isUser    Boolean
  confidence Float?
  wasEscalated Boolean @default(false)
  ticketId  String?
  createdAt DateTime @default(now())

  // Relations
  session ChatbotSession @relation(fields: [sessionId], references: [id], onDelete: Cascade)

  @@map("chatbot_messages")
}

model FAQ {
  id          String   @id @default(cuid())
  question    String
  answer      String
  category    String
  tags        String?  // JSON string array
  isActive    Boolean  @default(true)
  viewCount   Int      @default(0)
  helpfulCount Int     @default(0)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@map("faqs")
}

model SystemConfiguration {
  id        String   @id @default(cuid())
  key       String   @unique
  value     String
  type      String   // "string", "number", "boolean", "json"
  category  String
  updatedAt DateTime @updatedAt

  @@map("system_configurations")
}

// Enums
enum UserRole {
  ADMIN
  AGENT
  CUSTOMER
}

enum Priority {
  LOW
  MEDIUM
  HIGH
  CRITICAL
}

enum TicketStatus {
  OPEN
  IN_PROGRESS
  PENDING_CUSTOMER
  PENDING_APPROVAL
  RESOLVED
  CLOSED
  CANCELLED
}

enum AlertSeverity {
  LOW
  MEDIUM
  HIGH
  CRITICAL
}

enum AlertStatus {
  ACTIVE
  ACKNOWLEDGED
  RESOLVED
  SUPPRESSED
}

enum LogLevel {
  DEBUG
  INFO
  WARN
  ERROR
  FATAL
}




