from fastapi import FastAPI
from fastapi.middleware.cors import CORSMiddleware
import uvicorn
import os
from datetime import datetime
import random
import json

app = FastAPI(
    title="Unified IT Support System",
    description="A comprehensive IT support platform",
    version="1.0.0"
)

# CORS middleware
app.add_middleware(
    CORSMiddleware,
    allow_origins=["http://localhost:3000", "http://frontend:3000"],
    allow_credentials=True,
    allow_methods=["*"],
    allow_headers=["*"],
)

def get_intelligent_response(message: str) -> str:
    """Get intelligent response using pattern matching and knowledge base"""
    message_lower = message.lower().strip()

    # Greetings and basic interactions
    if any(word in message_lower for word in ["hi", "hello", "hey", "greetings", "good morning", "good afternoon", "good evening"]):
        return """üëã **Hello! I'm your AI IT Support Assistant**

I'm here to help you with virtually anything! I can assist with:

**üîß IT Support:**
‚Ä¢ Password resets & account issues
‚Ä¢ VPN & network connectivity
‚Ä¢ Software installation & updates
‚Ä¢ Performance troubleshooting
‚Ä¢ Email & communication tools

**üìö General Knowledge:**
‚Ä¢ Technology & programming
‚Ä¢ Science & mathematics
‚Ä¢ Business & finance
‚Ä¢ Health & wellness
‚Ä¢ Travel & lifestyle
‚Ä¢ And much more!

**üí° What I can do:**
‚Ä¢ Answer complex questions
‚Ä¢ Provide step-by-step guidance
‚Ä¢ Explain concepts clearly
‚Ä¢ Help with problem-solving
‚Ä¢ Offer creative solutions

What would you like to know or discuss today?"""

    # IT Support Topics
    elif any(word in message_lower for word in ["password", "reset", "forgot", "login", "access", "account"]):
        return """üîê **Password & Account Help**

I can help you with various account and password issues:

**üîÑ Password Reset Process:**
1. **Navigate** to the login page
2. **Click** "Forgot Password" or "Reset Password"
3. **Enter** your email address or username
4. **Check** your email for reset instructions
5. **Follow** the secure link provided
6. **Create** a new strong password

**üí° Password Best Practices:**
‚Ä¢ Use at least 12 characters
‚Ä¢ Include uppercase, lowercase, numbers, and symbols
‚Ä¢ Avoid common words or personal information
‚Ä¢ Use a unique password for each account
‚Ä¢ Consider using a password manager

**üîí Account Security:**
‚Ä¢ Enable two-factor authentication (2FA)
‚Ä¢ Regularly update your passwords
‚Ä¢ Monitor account activity
‚Ä¢ Use secure networks when logging in

**Need specific help?** Let me know your exact situation and I'll provide tailored guidance!"""

    elif any(word in message_lower for word in ["vpn", "remote", "connect", "network", "virtual private network"]):
        return """üåê **VPN & Network Connectivity**

I can help you with VPN setup and network issues:

**üì• VPN Setup Process:**
1. **Download** the VPN client from your IT portal
2. **Install** the application on your device
3. **Launch** the VPN client
4. **Enter** your company credentials
5. **Select** your preferred server location
6. **Connect** and verify your IP address

**üîß Troubleshooting Common Issues:**
‚Ä¢ **Connection fails:** Check internet connection, restart client
‚Ä¢ **Slow speeds:** Try different server locations
‚Ä¢ **Authentication errors:** Verify credentials, check account status
‚Ä¢ **DNS issues:** Flush DNS cache, use different DNS servers

**üõ°Ô∏è Security Benefits:**
‚Ä¢ Encrypts your internet traffic
‚Ä¢ Protects data on public Wi-Fi
‚Ä¢ Bypasses geographic restrictions
‚Ä¢ Maintains privacy and anonymity

**Need the VPN client or having specific issues?** I can provide detailed troubleshooting steps!"""

    elif any(word in message_lower for word in ["slow", "performance", "lag", "freeze", "hanging", "optimize"]):
        return """‚ö° **Performance Optimization & Troubleshooting**

I can help diagnose and fix performance issues:

**üöÄ Immediate Quick Fixes:**
‚Ä¢ **Restart** your computer (solves 70% of issues)
‚Ä¢ **Close** unnecessary programs and browser tabs
‚Ä¢ **Check** available disk space (need at least 10% free)
‚Ä¢ **Update** your operating system
‚Ä¢ **Clear** browser cache and temporary files

**üîç Advanced Troubleshooting:**
‚Ä¢ **Task Manager:** Check CPU, memory, and disk usage
‚Ä¢ **Malware Scan:** Run full antivirus scan
‚Ä¢ **Driver Updates:** Update graphics and network drivers
‚Ä¢ **Hardware Check:** Monitor temperatures and fan speeds
‚Ä¢ **Registry Cleanup:** Use trusted registry cleaner tools

**üíæ System Maintenance:**
‚Ä¢ **Disk Cleanup:** Remove temporary files and old downloads
‚Ä¢ **Defragmentation:** Optimize hard drive (HDD only)
‚Ä¢ **Startup Programs:** Disable unnecessary startup items
‚Ä¢ **Background Apps:** Limit background app activity

**üÜò When to Escalate:**
‚Ä¢ Persistent crashes or blue screens
‚Ä¢ Hardware failure symptoms
‚Ä¢ Security concerns or malware
‚Ä¢ Complex software conflicts

**Would you like me to create a support ticket for hands-on assistance?**"""

    elif any(word in message_lower for word in ["software", "install", "application", "program", "app"]):
        return """üíª **Software Installation & Management**

I can help with software installation and management:

**üì¶ Installation Process:**
1. **Identify** the software you need
2. **Download** from official sources only
3. **Check** system requirements
4. **Run** installer as administrator
5. **Follow** installation wizard
6. **Restart** if required

**‚úÖ Approved Software Categories:**
‚Ä¢ **Productivity:** Microsoft Office, Google Workspace
‚Ä¢ **Development:** VS Code, Git, Docker, Node.js
‚Ä¢ **Design:** Adobe Creative Suite, Figma, Canva
‚Ä¢ **Communication:** Slack, Teams, Zoom
‚Ä¢ **Security:** Antivirus, VPN clients

**üîí Enterprise Software:**
‚Ä¢ **Request Process:** Submit through IT portal
‚Ä¢ **Approval Time:** 24-48 hours typically
‚Ä¢ **Requirements:** Business justification needed
‚Ä¢ **Admin Rights:** Most software requires elevated privileges

**‚ö†Ô∏è Security Considerations:**
‚Ä¢ Always download from official sources
‚Ä¢ Verify digital signatures
‚Ä¢ Keep software updated
‚Ä¢ Avoid pirated or cracked software
‚Ä¢ Use company-approved software when possible

**Need help with a specific software installation?** Tell me what you're trying to install!"""

    elif any(word in message_lower for word in ["cybersecurity", "security", "hack", "malware", "virus", "phishing"]):
        return """üõ°Ô∏è **Cybersecurity & Information Security**

I can help you understand and implement cybersecurity best practices:

**üîê Core Security Concepts:**
‚Ä¢ **Confidentiality:** Protecting sensitive information
‚Ä¢ **Integrity:** Ensuring data accuracy and completeness
‚Ä¢ **Availability:** Maintaining system and data access
‚Ä¢ **Authentication:** Verifying user identity
‚Ä¢ **Authorization:** Controlling access permissions

**üö® Common Threats:**
‚Ä¢ **Malware:** Viruses, trojans, ransomware, spyware
‚Ä¢ **Phishing:** Fraudulent emails and websites
‚Ä¢ **Social Engineering:** Manipulation tactics
‚Ä¢ **DDoS Attacks:** Overwhelming systems with traffic
‚Ä¢ **Data Breaches:** Unauthorized access to sensitive data

**üõ†Ô∏è Security Best Practices:**
‚Ä¢ **Strong Passwords:** Complex, unique, regularly changed
‚Ä¢ **Multi-Factor Authentication:** Additional security layer
‚Ä¢ **Regular Updates:** Keep systems and software current
‚Ä¢ **Backup Strategy:** Regular, tested data backups
‚Ä¢ **Network Security:** Firewalls, VPNs, secure Wi-Fi

**üîç Incident Response:**
‚Ä¢ **Detection:** Monitor for suspicious activity
‚Ä¢ **Containment:** Isolate affected systems
‚Ä¢ **Eradication:** Remove threats and vulnerabilities
‚Ä¢ **Recovery:** Restore normal operations
‚Ä¢ **Lessons Learned:** Improve security posture

**üìö Security Awareness:**
‚Ä¢ **Training:** Regular security education
‚Ä¢ **Policies:** Follow company security guidelines
‚Ä¢ **Reporting:** Report suspicious activities immediately
‚Ä¢ **Vigilance:** Stay informed about new threats

**Need specific security guidance?** I can provide detailed information on any security topic!"""

    elif any(word in message_lower for word in ["programming", "code", "development", "python", "javascript", "java", "coding"]):
        return """üíª **Programming & Software Development**

I can help you with programming concepts, code examples, and development best practices:

**üîß Popular Programming Languages:**
‚Ä¢ **Python:** Data science, web development, automation
‚Ä¢ **JavaScript:** Web development, Node.js, React
‚Ä¢ **Java:** Enterprise applications, Android development
‚Ä¢ **C#:** .NET applications, Windows development
‚Ä¢ **Go:** Cloud computing, microservices
‚Ä¢ **Rust:** System programming, performance-critical apps

**üìö Development Concepts:**
‚Ä¢ **Object-Oriented Programming:** Classes, inheritance, polymorphism
‚Ä¢ **Functional Programming:** Pure functions, immutability
‚Ä¢ **Data Structures:** Arrays, linked lists, trees, graphs
‚Ä¢ **Algorithms:** Sorting, searching, optimization
‚Ä¢ **Design Patterns:** Singleton, Factory, Observer, MVC

**üõ†Ô∏è Development Tools:**
‚Ä¢ **IDEs:** VS Code, IntelliJ, Eclipse, Vim
‚Ä¢ **Version Control:** Git, GitHub, GitLab
‚Ä¢ **Testing:** Unit tests, integration tests, TDD
‚Ä¢ **CI/CD:** Jenkins, GitHub Actions, Docker
‚Ä¢ **Documentation:** README files, API docs, comments

**üåê Web Development:**
‚Ä¢ **Frontend:** HTML, CSS, JavaScript, React, Vue
‚Ä¢ **Backend:** Node.js, Python Flask/Django, Java Spring
‚Ä¢ **Databases:** SQL, NoSQL, PostgreSQL, MongoDB
‚Ä¢ **APIs:** REST, GraphQL, microservices
‚Ä¢ **Deployment:** AWS, Azure, Docker, Kubernetes

**üìñ Learning Resources:**
‚Ä¢ **Online Courses:** Coursera, Udemy, freeCodeCamp
‚Ä¢ **Documentation:** Official language docs, MDN
‚Ä¢ **Practice:** LeetCode, HackerRank, Codewars
‚Ä¢ **Projects:** Build real applications, contribute to open source

**What specific programming topic would you like to explore?** I can provide code examples, explanations, and guidance!"""

    elif any(word in message_lower for word in ["information", "info", "data", "knowledge", "facts", "details"]):
        return """üìö **Information & Knowledge**

I can help you understand and find information on virtually any topic!

**üîç What is Information?**
Information is **data that has been processed, organized, and structured** to provide meaning and context. It's the foundation of knowledge and decision-making.

**üìä Types of Information:**
‚Ä¢ **Factual Information:** Objective, verifiable data and statistics
‚Ä¢ **Procedural Information:** Step-by-step instructions and processes
‚Ä¢ **Conceptual Information:** Ideas, theories, and abstract concepts
‚Ä¢ **Analytical Information:** Interpreted data with insights and conclusions
‚Ä¢ **News Information:** Current events and recent developments

**üí° How I Can Help with Information:**
‚Ä¢ **Research Assistance:** Finding reliable sources and data
‚Ä¢ **Explanation:** Breaking down complex topics into understandable parts
‚Ä¢ **Fact-Checking:** Verifying information and providing accurate details
‚Ä¢ **Context:** Explaining how information relates to broader topics
‚Ä¢ **Resources:** Suggesting where to find more detailed information

**üéØ Information Sources I Can Access:**
‚Ä¢ **Technical Knowledge:** Programming, IT, science, mathematics
‚Ä¢ **Business Information:** Finance, marketing, management, economics
‚Ä¢ **General Knowledge:** History, geography, culture, current events
‚Ä¢ **Practical Information:** How-to guides, troubleshooting, best practices
‚Ä¢ **Academic Topics:** Research, theories, methodologies

**What specific information are you looking for?** I can provide detailed, accurate, and well-sourced information on any topic!"""

    elif any(word in message_lower for word in ["what", "how", "why", "when", "where", "who", "explain", "define", "meaning"]):
        return f"""ü§î **I'd be happy to help explain that!**

You asked: **"{message}"**

**üí° Let me break this down for you:**

I can provide detailed explanations on virtually any topic. Here's how I can help:

**üîç What I can explain:**
‚Ä¢ **Concepts & Definitions:** Clear explanations of complex ideas
‚Ä¢ **How Things Work:** Step-by-step processes and mechanisms
‚Ä¢ **Why Things Happen:** Causes, reasons, and underlying principles
‚Ä¢ **When & Where:** Context, timing, and location information
‚Ä¢ **Who & What:** People, organizations, and key facts

**üìö My explanation approach:**
1. **Start Simple:** Basic concepts first
2. **Add Detail:** More complex aspects
3. **Provide Examples:** Real-world applications
4. **Connect Ideas:** How it relates to other topics
5. **Suggest Resources:** Where to learn more

**üéØ Topics I excel at explaining:**
‚Ä¢ **Technology:** Programming, software, hardware, networks
‚Ä¢ **Science:** Physics, chemistry, biology, mathematics
‚Ä¢ **Business:** Finance, marketing, management, economics
‚Ä¢ **General Knowledge:** History, geography, culture, current events
‚Ä¢ **Practical Skills:** How-to guides, troubleshooting, best practices

**Could you be more specific about what you'd like me to explain?** For example:
- "Explain how computers work"
- "What is artificial intelligence?"
- "How do I learn programming?"
- "Why is cybersecurity important?"

I'm here to provide clear, comprehensive explanations!"""

    # Default intelligent response
    else:
        return f"""ü§ñ **I'm here to help with anything!**

I understand you're asking about **"{message}"** - that's a great question!

**üí° What I can do:**
‚Ä¢ **Answer questions** on virtually any topic
‚Ä¢ **Provide detailed explanations** with examples
‚Ä¢ **Offer step-by-step guidance** for complex processes
‚Ä¢ **Suggest resources** for deeper learning
‚Ä¢ **Help solve problems** creatively and effectively

**üîç My expertise includes:**
‚Ä¢ **Technology & Programming** - Coding, software, IT support
‚Ä¢ **Science & Mathematics** - Physics, chemistry, biology, math
‚Ä¢ **Business & Finance** - Economics, marketing, management
‚Ä¢ **Health & Wellness** - Fitness, nutrition, mental health
‚Ä¢ **Travel & Lifestyle** - Destinations, planning, culture
‚Ä¢ **General Knowledge** - History, literature, current events
‚Ä¢ **And much more!**

**üéØ How I can help you:**
1. **Clarify** your question if needed
2. **Provide** comprehensive information
3. **Suggest** practical next steps
4. **Offer** additional resources
5. **Answer** follow-up questions

**What would you like to know more about?** Feel free to ask me anything - I'm designed to be helpful, accurate, and comprehensive in my responses!"""

@app.get("/")
async def root():
    return {"message": "Unified IT Support System API", "version": "1.0.0"}

@app.get("/health")
async def health_check():
    return {"status": "healthy", "service": "unified-it-support"}

@app.get("/api/dashboard/health")
async def get_system_health():
    """Get current system health metrics."""
    return {
        "cpu_usage": round(random.uniform(20, 80), 1),
        "memory_usage": round(random.uniform(30, 90), 1),
        "disk_usage": round(random.uniform(10, 70), 1),
        "uptime_hours": round(random.uniform(24, 168), 1),
        "active_alerts": random.randint(0, 5),
        "status": "operational"
    }

@app.get("/api/dashboard/metrics")
async def get_dashboard_metrics():
    """Get comprehensive dashboard metrics."""
    return {
        "system_health": {
            "cpu_usage": round(random.uniform(20, 80), 1),
            "memory_usage": round(random.uniform(30, 90), 1),
            "disk_usage": round(random.uniform(10, 70), 1),
            "uptime_hours": round(random.uniform(24, 168), 1),
            "active_alerts": random.randint(0, 5),
            "status": "operational"
        },
        "tickets": {
            "total": random.randint(50, 200),
            "open": random.randint(10, 50),
            "resolved_today": random.randint(5, 25),
            "avg_resolution_time": f"{random.randint(2, 48)} hours"
        },
        "alerts": [
            {
                "id": random.randint(1000, 9999),
                "type": random.choice(["warning", "error", "info"]),
                "message": random.choice([
                    "High CPU usage detected",
                    "Memory usage above threshold",
                    "Disk space running low",
                    "Network connectivity issue",
                    "Service restart required"
                ]),
                "timestamp": datetime.now().isoformat(),
                "severity": random.choice(["low", "medium", "high", "critical"])
            }
            for _ in range(random.randint(0, 5))
        ]
    }

@app.post("/api/tickets/create")
async def create_ticket(ticket_data: dict):
    """Create a new support ticket."""
    return {
        "id": random.randint(100, 999),
        "title": ticket_data.get("title", "New Ticket"),
        "description": ticket_data.get("description", ""),
        "priority": ticket_data.get("priority", "medium"),
        "status": "open",
        "created_at": datetime.now().isoformat(),
        "updated_at": datetime.now().isoformat(),
        "resolved_at": None
    }

@app.post("/api/chatbot/chat")
async def chat_with_bot(chat_data: dict):
    """Chat with the intelligent assistant using pattern matching."""
    message = chat_data.get("message", "").strip()

    if not message:
        return {
            "response": "Please enter a message to start our conversation!",
            "session_id": f"session_{random.randint(1000, 9999)}",
            "confidence_score": 0.5,
            "was_escalated": False,
            "ticket_id": None
        }

    # Get intelligent response using pattern matching
    response_text = get_intelligent_response(message)

    # Calculate confidence based on response length and content
    confidence = min(0.95, max(0.7, len(response_text) / 1000))

    return {
        "response": response_text,
        "session_id": f"session_{random.randint(1000, 9999)}",
        "confidence_score": confidence,
        "was_escalated": False,
        "ticket_id": None
    }

@app.get("/api/chatbot/faqs")
async def get_faqs():
    """Get FAQ entries."""
    return [
        {
            "id": 1,
            "question": "How do I reset my password?",
            "answer": "Click 'Forgot Password' on the login page and follow the email instructions.",
            "category": "Account"
        },
        {
            "id": 2,
            "question": "How do I connect to VPN?",
            "answer": "Download the VPN client from the IT portal and use your company credentials.",
            "category": "Network"
        },
        {
            "id": 3,
            "question": "What are the support hours?",
            "answer": "IT support is available Monday-Friday, 8 AM - 6 PM. Emergency support is 24/7.",
            "category": "General"
        }
    ]

# Authentication endpoints
@app.post("/api/auth/login")
async def login(login_data: dict):
    """Login endpoint."""
    username = login_data.get("username", "")
    password = login_data.get("password", "")

    # Simple mock authentication - accept any username/password for demo
    if username and password:
        return {
            "access_token": f"mock_token_{username}_{int(datetime.now().timestamp())}",
            "token_type": "bearer"
        }
    else:
        return {"detail": "Username and password required"}

@app.post("/api/auth/register")
async def register(user_data: dict):
    """Register endpoint."""
    return {
        "id": 1,
        "username": user_data.get("username", ""),
        "email": user_data.get("email", ""),
        "full_name": user_data.get("full_name", ""),
        "role": user_data.get("role", "customer"),
        "is_active": True,
        "created_at": datetime.now().isoformat()
    }

@app.get("/api/auth/me")
async def get_current_user():
    """Get current user info."""
    return {
        "id": 1,
        "username": "demo_user",
        "email": "demo@example.com",
        "full_name": "Demo User",
        "role": "admin",
        "is_active": True,
        "created_at": datetime.now().isoformat()
    }

if __name__ == "__main__":
    uvicorn.run(
        "simple_main_fallback:app",
        host="127.0.0.1",
        port=8001,
        reload=True
    )
